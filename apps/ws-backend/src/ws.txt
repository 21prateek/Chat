Explaining redu toolkit

1. Import Statements
configureStore:A utility from Redux Toolkit to quickly set up a Redux store with sensible defaults.
createSlice: A function to simplify creating Redux slices (state + reducers bundled together).
PayloadAction: A TypeScript utility that describes the shape of the action payload for type safety.

2. Defining interface
UserState: Describes the structure of a single user:
userId: The ID of the user.
rooms: An array of room IDs the user has joined.
ws: The WebSocket object associated with the user.

WebSocketState: Describes the state structure for the Redux store:
users: An array of UserState objects, representing all connected users.

3. Initial State
This is the initial state of the Redux store:
users: Starts as an empty array since no users are connected initially.

4. Create Slice

Breakdown:
createSlice:
name: A name for the slice, used to prefix actions (e.g., websocket/addUser).
initialState: The starting state of the slice.
reducers: Defines how the state should be updated for specific actions.

Reducers:

addUser:
Adds a new user to the users array.
The action.payload is of type UserState, representing the new user to be added.
Example:
dispatch(addUser({ userId: "user1", rooms: [], ws: someWebSocket }));

removeUser:
Removes a user based on their userId.
The action.payload is of type string, representing the userId to be removed.
Example:
dispatch(removeUser("user1"));

joinRoom:
Adds a room to a user's rooms array if they are not already in that room.
The action.payload is an object containing:
userId: The ID of the user.
roomId: The ID of the room to join.
Example:
dispatch(joinRoom({ userId: "user1", roomId: "room1" }));

leaveRoom:
Removes a room from a user's rooms array.
The action.payload is an object containing:
userId: The ID of the user.
roomId: The ID of the room to leave.
Example:
dispatch(leaveRoom({ userId: "user1", roomId: "room1" }));

5.Export Actions
Exports the action creators generated by createSlice. These can be dispatched to update the state.

6. Configure Store
Sets up the Redux store using the reducer generated by createSlice

7. Export Types
RootState: A TypeScript type representing the entire state of the store.
AppDispatch: A TypeScript type for the dispatch function, ensuring the correct types for dispatched actions.


How does it work 
How It All Works Together
Initial Setup:
The store is created with an empty users array

Adding a User:
When a user connects, addUser is dispatched:
dispatch(addUser({ userId: "user1", rooms: [], ws: someWebSocket }));
The users array updates to include the new user.

Joining a Room:
When a user joins a room, joinRoom is dispatched:
dispatch(joinRoom({ userId: "user1", roomId: "room1" }));
The specified room is added to the user's rooms array.

Removing a User:
When a user disconnects, removeUser is dispatched:
dispatch(removeUser("user1"));
The user is removed from the users array.

Leaving a Room:
When a user leaves a room, leaveRoom is dispatched:
dispatch(leaveRoom({ userId: "user1", roomId: "room1" }));
The room is removed from the user's rooms array.

In index.ts 
 state = store.getState(); It retrieves the current state of the Redux store. In Redux, the store is the central repository where the state of your entire application is stored. Using store.getState(), you can access the current state at any point in your application.

 When you call store.getState(), it:Returns the current state object managed by the Redux store.This state is typically structured as a single JavaScript object containing all the application's data, which is updated whenever an action is dispatched.